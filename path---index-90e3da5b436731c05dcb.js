webpackJsonp([0x81b8806e4260],{337:function(n,s){n.exports={data:{allMarkdownRemark:{edges:[{node:{excerpt:"There sometimes seems to be a perception that Vim plugins are all heavy, or somehow having a .vimrc or init.vim free of plugins is somehow perferable. I'd like to clear some things up by demonstrating that Vim plugins are simply regular dotfiles…",html:'<p>There sometimes seems to be a perception that Vim plugins are all heavy, or somehow having a .vimrc or init.vim free of plugins is somehow perferable. I\'d like to clear some things up by demonstrating that Vim plugins are simply regular dotfiles, just in a different folder (or repo).</p>\n<h2>Vim\'s configuration</h2>\n<p>In our context we\'re referring to our vim\'s dotfiles, which would be at <code class="language-text">~/.config/vim/vimrc</code> (or <code class="language-text">~/.config/nvim/init.vim</code> if you\'re using Neovim.)</p>\n<p>Vim has more than just the <code class="language-text">rc</code> or <code class="language-text">init</code> entry point files though, there are a lot of other autoloaded folders and ways of loading configuration.</p>\n<h2>Well, what are dotfiles?</h2>\n<blockquote>\n<p>Dotfiles are plain text configuration files on Unix-y systems... They are called "dotfiles" as they typically are named with a leading <code class="language-text">.</code></p>\n<p>-- Chris and Gave @ Thoughbot</p>\n</blockquote>\n<p>In our context we\'re referring to our vim\'s dotfiles, which would be at <code class="language-text">~/.config/vim/vimrc</code> (or <code class="language-text">~/.config/nvim/init.vim</code> if you\'re using <a href="https://neovim.io/">Neovim</a>). However there are more to vim\'s configuration than just the initial config entry file.</p>\n<h2>Autoload folders</h2>\n<p>There are several folders that are automatically loaded by vim</p>\n<ul>\n<li><code class="language-text">ftdetect</code> run every time a new file of the filetype is loaded to dynamically detect and set the filetype</li>\n<li><code class="language-text">ftplugin</code> run everytime for a given filetype (not by filename)</li>\n<li><code class="language-text">plugins</code> always loaded when vim is loaded</li>\n<li><code class="language-text">...</code> others....</li>\n</ul>\n<p>There sometimes seems to be a perception that Vim plugins are all heavy, or somehow having a <code class="language-text">.vimrc</code> or <code class="language-text">init.vim</code> free of plugins is somehow perferable. I\'d like to clear some things up by demonstrating that Vim plugins are simply regular dotfiles, just in a different folder (or repo).</p>\n<h2>Let\'s create a super-basic plugin!</h2>\n<p>Let\'s create a plugin for editing markdown, we can start in our local dotfiles folder so navigate there (it\'s likely <code class="language-text">~/.config/vim/</code> or <code class="language-text">~/config/nvim/</code> if you\'re using Neovim, you\'ll need to create it if it doesn\'t exist).</p>\n<p>Now let\'s create a <code class="language-text">markdown.vim</code> to add behaviour to files using the markdown filetype. For this file to be autoloaded by Vim, we\'ll need to put it in Vim\'s <code class="language-text">ftplugin</code> folder and make sure that our filename matches the filetype we want to extend. Now we can add some simple key-bindings:</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code class="language-vim"><span class="token comment">" ~/.config/nvim/ftplugin/markdown.vim</span>\n<span class="token string">" Up/Down to navigate between headings (by searching for lines starting w/ 1+ "</span>#<span class="token comment">")</span>\nnnoremap <span class="token operator">&lt;</span>Up<span class="token operator">></span> <span class="token operator">?</span>^#\\<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span>\nnnoremap <span class="token operator">&lt;</span>Down<span class="token operator">></span> <span class="token operator">/</span>^#\\<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span></code></pre>\n      </div>\n<h2>Close and reopen Vim to make sure it works 🤞</h2>\n<p>If all went well, we should be able to jump between markdown headings with the arrow keys now! Now let\'s create a new repo so we\'ve got a <em>real</em> real plugin, just like <a href="https://github.com/tpope">tpope</a> or <a href="https://github.com/junegunn">junegunn</a>!</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">cd /path/to/your/projects\nmkdir markdown-navigator/\ncd markdown-navigator/\ngit init</code></pre>\n      </div>\n<p>Now we have somewhere to put our vim plugin, so let\'s repeat what we did in our local dotfiles repo:</p>\n<ul>\n<li>Create an <code class="language-text">ftplugin</code> folder</li>\n<li>Create a <code class="language-text">markdown.vim</code> file in that folder</li>\n<li>Commit and push the changes to github (or wherever you host your code.)</li>\n</ul>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code class="language-vim"><span class="token comment">" ./ftplugin/markdown.vim</span>\n<span class="token comment">" Up/Down to navigate between headings (by searching for lines starting with #s)</span>\nnnoremap <span class="token operator">&lt;</span>Up<span class="token operator">></span> <span class="token operator">?</span>^#\\<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span>\nnnoremap <span class="token operator">&lt;</span>Down<span class="token operator">></span> <span class="token operator">/</span>^#\\<span class="token operator">+</span><span class="token operator">&lt;</span><span class="token keyword">cr</span><span class="token operator">></span></code></pre>\n      </div>\n<p>then save and push those changes:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sh"><code class="language-sh">git add .\ngit commit -m &#39;Adds header navigation for markdown filetypes&#39;\n# obvs use your repo here... 🕵\ngit remote add origin https://github.com/perrupa/markdown-navigator.vim\ngit push origin master</code></pre>\n      </div>\n<p>To make sure the changes come from our plugin, we should make sure to delete the test code we wrote in our dotfiles. Please be sure to go back and delete the <code class="language-text">~/.config/vim/ftplugin/markdown.vim</code> file we created and restart vim to make sure we don\'t still have those mappings sticking around.</p>\n<p>At this point, you should be able to install your minimal plugin with your favourite plugin manager. I use <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, it\'s always worked great for me but you might prefer another.</p>\n<div class="gatsby-highlight">\n      <pre class="language-vim"><code class="language-vim"><span class="token comment">" ~/.config/vim/vimrc</span>\n<span class="token comment">" ...</span>\n\n<span class="token keyword">call</span> plug#<span class="token function">begin</span><span class="token punctuation">(</span><span class="token string">\'~/.vim/bundle\'</span><span class="token punctuation">)</span>\n  <span class="token comment">" Other plugins...</span>\n\n  <span class="token comment">" Your GH repo for the plugin here 👇</span>\n  Plug <span class="token string">\'perrupa/markdown-navigator.vim\'</span>\n<span class="token keyword">call</span> plug#<span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p>Make sure to source your vimrc file, or restart vim, then run <code class="language-text">:PlugInstall</code> and you should see your plugin included with any other plugins you had added recently.</p>\n<p>By this point you should be cheering because you just created your very first Vim plugin! Now you can take all those neat tricks, custom command wrappers, domain-specific scripts or plugin-implementations you created in your dotfiles and share them with the world (or at least your coworkers)!</p>\n<p>I\'ve thrown up a tiny example of <a href="https://github.com/perrupa/markdown-navigator.vim">the markdown-navigator.vim plugin</a> on my <a href="https://github.com/perrupa/">Github account</a> for those who want to test it before creating their own.</p>',id:"/Users/cmarlow/Projects/cmarlow-static/posts/2019-12-16 vim plugins are just dotfiles.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2019-12-16T00:00:00.000Z",path:"/posts/2019-12-16 vim plugins are just dotfiles",title:"Vim plugins are just dotfiles"}}},{node:{excerpt:'I\'ve found it extremely helpful when writing React components using hooks to create new abstractions for my multiple hooks by grouping them into a single "custom hook". Reasoning about a single hook is very simple (literally composed of a single…',html:'<p>I\'ve found it extremely helpful when writing React components using hooks to create new abstractions for my multiple hooks by grouping them into a single "custom hook". Reasoning about a single hook is very simple (literally composed of a single element), but when your single component needs to keep track of multiple pieces of states, or actions that act on that state, things become tend to become more complex.</p>\n<p>At this point it\'s a great idea to abstract away that complexity, exposing only what is relevant in the context of the consumer.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/* MyApp.jsx */</span>\n<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">open</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">close</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Modal isVisible<span class="token operator">=</span><span class="token punctuation">{</span>isVisible<span class="token punctuation">}</span> closeButton<span class="token operator">=</span><span class="token punctuation">{</span>actions<span class="token punctuation">.</span>close<span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token constant">I</span>\'m <span class="token keyword">in</span> a dialog<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>actions<span class="token punctuation">.</span>close<span class="token punctuation">}</span><span class="token operator">></span>Close<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>\n\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>actions<span class="token punctuation">.</span>open<span class="token punctuation">}</span><span class="token operator">></span>Open dialog<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<h2>Step one: create an empty hook</h2>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// add the hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>useModalVisibility<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./use-modal-visibility\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// call it from your component</span>\n  <span class="token keyword">const</span> unusedValue <span class="token operator">=</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Everything else unchanged....</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">open</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">close</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// rendering...</span></code></pre>\n      </div>\n<blockquote>\n<p>☝️  This shouldn\'t affect our component at all.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/* use-modal-visibility.jsx */</span>\n<span class="token keyword">function</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>This doesn\'t achieve much, but it doesn\'t break our code and our component should continue to work as normal 🤞</p>\n<h2>Step two: Start pulling over hooks</h2>\n<p>Now let\'s move over the bare minimum from our component into the hook. We should be extra careful to make sure that our tests still pass (you are testing your components, right?) and our component still works.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// add the hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>useModalVisibility<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./use-modal-visibility\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// call it from your component</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Use the value/functions from useModalVisibility</span>\n  <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">open</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">close</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// rendering...</span></code></pre>\n      </div>\n<p>All our custom hook is doing so far is holding the <code class="language-text">useState</code> logic, but not doing more than being a simple wrapper.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/* use-modal-visibility.jsx */</span>\n<span class="token keyword">function</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2>Step three: Finalize the API/complete the abstraction</h2>\n<p>Now let\'s move over the bare minimum from our component into the hook. We should be extra careful to make sure that our tests still pass (you are testing your components, right?) and our component still works.</p>\n<blockquote>\n<p>Since the <code class="language-text">actions</code> block has no external referneces, we know that we can move these actions into our hook.</p>\n</blockquote>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/* use-modal-visibility.jsx */</span>\n<span class="token keyword">function</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> setVisible<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// isolate the implementation logic</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">open</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">close</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> <span class="token punctuation">{</span>open<span class="token punctuation">,</span> close<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>Having pulled all the state logic successfully into the custom hook, our stateless component is starting to look a whole lot more stateless again!</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// add the hook</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>useModalVisibility<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./use-modal-visibility\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">MyApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// call it from your component</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> <span class="token punctuation">{</span>open<span class="token punctuation">,</span> close<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token operator">&lt;</span>main<span class="token operator">></span>\n      <span class="token operator">&lt;</span>Modal isVisible<span class="token operator">=</span><span class="token punctuation">{</span>isVisible<span class="token punctuation">}</span> closeButton<span class="token operator">=</span><span class="token punctuation">{</span>close<span class="token punctuation">}</span><span class="token operator">></span>\n        <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token constant">I</span>\'m <span class="token keyword">in</span> a dialog<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>\n        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>close<span class="token punctuation">}</span><span class="token operator">></span>Close<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n      <span class="token operator">&lt;</span><span class="token operator">/</span>Modal<span class="token operator">></span>\n\n      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>open<span class="token punctuation">}</span><span class="token operator">></span>Open dialog<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>\n    <span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>It could be tempting to go further if you found yourself writing <code class="language-text">toggle</code> functions quite a bit, and expose <code class="language-text">toggle</code> along side <code class="language-text">open</code> and <code class="language-text">close</code>.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>isVisible<span class="token punctuation">,</span> <span class="token punctuation">{</span>open<span class="token punctuation">,</span> close<span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useModalVisibility</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">toggle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> isVisible <span class="token operator">?</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>You wouldn\'t be wrong to do that, don\'t forget that <em><em>we choose the abstractions we compute by</em></em>.</p>',id:"/Users/cmarlow/Projects/cmarlow-static/posts/2019-12-15 Custom React Hooks.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2019-12-15T00:00:00.000Z",path:"/posts/2019-12-15 Custom React Hooks",title:"Refactoring a React component using custom hooks"}}},{node:{excerpt:"I wanted to add compile-time syntax highlighting to the code sections of this blog today, so I took a look around. I was already using gatsby-transformer-remark for markdown to HTML conversion of blog posts, so I needed to add a plugin that would…",html:'<p>I wanted to add compile-time syntax highlighting to the code sections of this blog today, so I took a look around.</p>\n<p>I was already using gatsby-transformer-remark for markdown to HTML conversion of blog posts, so I needed to add a plugin that would parse my code blocks into styleable html. Enter the handy Gatsby plugin <a href="https://github.com/chasm/gatsby-remark-prismjs">gatsby-remark-prismjs</a>, it was super simple to configure for use with gatsby-transformer-remark. I only needed to add it as a plugin in my Gatsby config</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">// In your gatsby-config.js change this simple include:</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token string">\'gatsby-transformer-remark\'</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// to this \'configured\' include:</span>\nplugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    resolve<span class="token punctuation">:</span> <span class="token string">\'gatsby-transformer-remark\'</span><span class="token punctuation">,</span>\n    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n      plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">\'gatsby-remark-prismjs\'</span> <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span></code></pre>\n      </div>\n<h3>Congratulations, you now have annotated, but unstyled, code blocks.</h3>\n<p>Now we need to include some CSS to apply some colors to our marked-up syntax. PrismJS has <a href="https://github.com/PrismJS/prism-themes">plenty of excellent, standard themes</a>, but I wanted some simpler. It needed to be easily readable without being too jarring or removed from the style and theme of this site, so I looked around for something simple to extend.</p>\n<p><a href="https://github.com/MoOx/sass-prism-theme-base"><code class="language-text">MoOx/sass-prism-theme-base</code></a> by <a href="https://github.com/MoOx">MoOx</a> was a great base to build off of. The repo wasn\'t easily consumable by yarn, so I copied the <code class="language-text">_prism.scss</code> for the base styles into my project to be used there. I may need to investigate sharing a variant of a base SASS PrismJS theme, as that\'s exactly what I was looking for.</p>\n<p>I created a base <code class="language-text">_syntax-theme.scss</code> file to contain my variables and setting overrides, it looks a little like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-sass"><code class="language-sass"><span class="token comment">// _syntax-theme.scss</span>\n<span class="token variable-line"><span class="token variable">$code</span><span class="token punctuation">:</span>     #454390;</span>\n<span class="token variable-line"><span class="token variable">$value</span><span class="token punctuation">:</span>    #e6d06c;</span>\n<span class="token variable-line"><span class="token variable">$keyword</span><span class="token punctuation">:</span>  #f12769;</span>\n<span class="token variable-line"><span class="token variable">$operator</span><span class="token punctuation">:</span> #f00;</span>\n<span class="token variable-line"><span class="token variable">$subtle</span><span class="token punctuation">:</span>   #aaa;</span>\n<span class="token variable-line"><span class="token variable">$comment</span><span class="token punctuation">:</span>  #999;</span>\n\n<span class="token variable-line"><span class="token variable">$code-color</span><span class="token punctuation">:</span>         <span class="token variable">$code</span>;</span>\n<span class="token variable-line"><span class="token variable">$code-color-fade</span><span class="token punctuation">:</span>    <span class="token variable">$subtle</span>;</span>\n<span class="token variable-line"><span class="token variable">$code-color-comment</span><span class="token punctuation">:</span> <span class="token variable">$comment</span>;</span>\n<span class="token variable-line"><span class="token variable">$code-color-keyword</span><span class="token punctuation">:</span> <span class="token variable">$keyword</span>;</span>\n<span class="token variable-line"><span class="token variable">$code-color-value</span><span class="token punctuation">:</span>   <span class="token variable">$code</span>;</span>\n<span class="token variable-line"><span class="token variable">$code-color-string</span><span class="token punctuation">:</span>  <span class="token variable">$value</span>;</span>\n\n<span class="token variable-line"><span class="token variable">$code-tab-size</span><span class="token punctuation">:</span>      2;</span>\n<span class="token variable-line"><span class="token variable">$code-font-size</span><span class="token punctuation">:</span> \t   18px;</span>\n<span class="token variable-line"><span class="token variable">$code-line-height</span><span class="token punctuation">:</span>\t 1.7;</span>\n\n<span class="token atrule-line"><span class="token atrule">@import</span> "prism";</span></code></pre>\n      </div>\n<p>I hope this quick explanation helps get some more people out there blogging about code.</p>\n<p>Later!</p>',
id:"/Users/cmarlow/Projects/cmarlow-static/posts/2018-04-14 prismJS and and scss syntax theme.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-04-14T00:00:00.000Z",path:"/posts/2018-04-14 prismJS and and scss syntax theme",title:"Custom syntax highlighting for Gatsby"}}},{node:{excerpt:"Was a dope night. \n \n",html:'<p>Was a dope night.</p>\n<p><img src="/images/2018-01-19-frequencies/1.jpg">\n<img src="/images/2018-01-19-frequencies/2.jpg">\n<img src="/images/2018-01-19-frequencies/3.jpg"></p>',id:"/Users/cmarlow/Projects/cmarlow-static/posts/2018-01-19 Frequencies.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-19T00:00:00.000Z",path:"/posts/2018-01-19-Frequencies",title:"Frequencies 2018-01-19"}}},{node:{excerpt:"\n \n \n \n \n \n \n \n \n Go back to the homepage",html:'<p><img src="/images/high-park/DSCF6519.jpg">\n<img src="/images/high-park/DSCF6557.jpg">\n<img src="/images/high-park/DSCF6561.jpg">\n<img src="/images/high-park/DSCF6587-2.jpg">\n<img src="/images/high-park/DSCF6632-2.jpg">\n<img src="/images/high-park/DSCF6555.jpg">\n<img src="/images/high-park/DSCF6559.jpg">\n<img src="/images/high-park/DSCF6566.jpg">\n<img src="/images/high-park/DSCF6598-2.jpg">\n<img src="/images/high-park/DSCF6645-2.jpg"></p>\n<p><a href="/">Go back to the homepage</a></p>',id:"/Users/cmarlow/Projects/cmarlow-static/posts/2018-01-04 High Park.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2018-01-04T00:00:00.000Z",path:"/posts/2018-01-04 High Park",title:"A walk in High Park"}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-90e3da5b436731c05dcb.js.map